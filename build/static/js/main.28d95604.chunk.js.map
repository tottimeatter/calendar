{"version":3,"sources":["components/popup/popup.js","components/calendar/calendar.js","assets/add-black-18dp.svg","App.js","reportWebVitals.js","firebase-config.js","index.js"],"names":["Popup","className","onClick","this","props","reminder","closeReminder","closePopup","text","deleteReminder","Component","PopUpForm","handleSubmit","event","preventDefault","state","when","Date","toISOString","color","handleInputChange","bind","handleBlur","target","value","name","setState","xhr","XMLHttpRequest","withCredentials","addEventListener","readyState","DONE","console","log","responseText","open","setRequestHeader","send","onSubmit","description","onChange","type","where","onBlur","PopUpReminder","Calendar","reminders","openReminder","r","Month","currentMonth","selectedDate","previousMonth","dateFns","nextMonth","days","startDate","weekStartsOn","i","push","monthStart","monthEnd","endDate","rows","day","formattedDate","getDayReminders","getDate","getMonth","style","backgroundColor","id","renderHeader","renderDays","renderCells","App","showPopup","showReminder","getData","formResult","newReminderKey","firebase","database","ref","child","key","writeReminderData","DBreminders","once","then","snapshot","forEach","childSnapshot","val","set","remove","togglePopup","src","AddIcon","alt","sendData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","apiKey","authDomain","projectId","databaseURL","storageBucket","messagingSenderId","appId","initializeApp","firebaseConfig","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28d95604.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport './popup.css'\r\n\r\nclass Popup extends Component {\r\n    render() {\r\n      return (\r\n        <div className='popup'>\r\n          <div className='popup_inner'>\r\n          <div className=\"closePopup\" onClick={this.props.reminder ? this.props.closeReminder : this.props.closePopup}><div className=\"close\"></div></div>\r\n            <h2>{this.props.text}</h2>\r\n            {this.props.reminder ? <PopUpReminder reminder={this.props.reminder} deleteReminder={this.props.deleteReminder}/> : <PopUpForm closePopup={this.props.closePopup}/>}\r\n          {/* <button onClick={this.props.closePopup}>Create reminder</button> */}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  class PopUpForm extends Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        // TODO Fer que el dia/hora actuals surtin com a default\r\n        //\"2021-01-27T19:25\" \r\n        when: new Date().toISOString(),\r\n        color: \"#000000\"\r\n      }\r\n      this.handleInputChange = this.handleInputChange.bind(this);\r\n      this.handleBlur = this.handleBlur.bind(this);\r\n    }\r\n    handleInputChange(event){\r\n      const target = event.target;\r\n      const value = target.value;\r\n      const name = target.name;\r\n  \r\n      this.setState({\r\n        [name]: value\r\n      });\r\n    }\r\n    handleBlur(event){\r\n      const data = null;\r\n\r\n      const xhr = new XMLHttpRequest();\r\n      xhr.withCredentials = true;\r\n\r\n      xhr.addEventListener(\"readystatechange\", function () {\r\n        if (this.readyState === this.DONE) {\r\n          console.log(this.responseText);\r\n        }\r\n      });\r\n      console.log(event.target.value)\r\n      xhr.open(\"GET\", `https://community-open-weather-map.p.rapidapi.com/weather?q=${event.target.value}%2C%20es&lat=0&lon=0&callback=test&id=2172797&lang=null&units=%22metric%22&mode=xml%2C%20html`);\r\n      xhr.setRequestHeader(\"x-rapidapi-key\", \"8f44acada3msh175d13ed341cd8ap1fe062jsn64f16618a687\");\r\n      xhr.setRequestHeader(\"x-rapidapi-host\", \"community-open-weather-map.p.rapidapi.com\");\r\n\r\n      xhr.send(data);\r\n    }\r\n    handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      // TODO Form verification\r\n      this.props.closePopup(this.state);\r\n    }\r\n    render (){\r\n      return(\r\n        <form className=\"popup-form\" onSubmit={this.handleSubmit}>\r\n          <label>✍ Description</label>\r\n          <div>\r\n            <input name=\"description\" \r\n              value={this.state.description} \r\n              onChange={this.handleInputChange} \r\n              className=\"input\" \r\n              type=\"text\"/>\r\n            <input name=\"color\" \r\n              value={this.state.color} \r\n              onChange={this.handleInputChange} \r\n              type=\"color\"/>\r\n          </div>\r\n          <label>📅 When?</label>\r\n          <input name=\"when\" \r\n            value={this.state.when} \r\n            onChange={this.handleInputChange} \r\n            className=\"input\" \r\n            type=\"datetime-local\"/>\r\n          <label>🌍 Where?</label>\r\n          <input name=\"where\" \r\n            value={this.state.where} \r\n            onChange={this.handleInputChange}\r\n            onBlur={this.handleBlur}\r\n            className=\"input\" \r\n            type=\"text\"/>\r\n          <input type=\"submit\" value=\"New reminder\"/>\r\n        </form>\r\n      )\r\n     }\r\n  }\r\n\r\n  class PopUpReminder extends Component {\r\n    render(){\r\n      return (\r\n        <div>\r\n          <div>\r\n            <span>{this.props.reminder.description}</span> \r\n          </div>\r\n          <button className=\"delete-reminder\" onClick={this.props.deleteReminder}>Delete</button>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  export default Popup;","import { Component } from 'react';\r\nimport * as dateFns from 'date-fns';\r\nimport './calendar.css'\r\n\r\nclass Calendar extends Component {\r\n    render(){\r\n        return(\r\n          <div>\r\n            <Month reminders={this.props.reminders} openReminder={(r) => this.props.openReminder(r)}/>\r\n          </div>\r\n        )\r\n    }\r\n  }\r\n  \r\nclass Month extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n        currentMonth: new Date(),\r\n        selectedDate: new Date()\r\n        };\r\n    }\r\n    previousMonth(){\r\n        const previousMonth = dateFns.subDays(dateFns.startOfMonth(this.state.currentMonth), 1);\r\n        this.setState({\r\n            currentMonth: previousMonth\r\n        })\r\n    }\r\n    nextMonth(){\r\n        const nextMonth = dateFns.addDays(dateFns.endOfMonth(this.state.currentMonth), 1);\r\n        this.setState({\r\n            currentMonth: nextMonth,\r\n        })\r\n    }\r\n    /**\r\n     * Renders the header of the page\r\n     */\r\n    renderHeader(){\r\n        // this.nextMonth();\r\n        return (\r\n            <div className=\"month-header\">\r\n                <button onClick={() => this.previousMonth()}>Previous month</button>\r\n                <h1 className=\"monthName\">{dateFns.format(this.state.currentMonth, 'MMMM yyyy')}</h1>\r\n                <button onClick={this.nextMonth.bind(this)}>Next month</button>\r\n            </div>\r\n        )\r\n    }\r\n    /**\r\n     * Renders days (name) of the current week\r\n     */\r\n    renderDays(){\r\n        const dateFormat = \"iiii\";\r\n        const days = [];\r\n        let startDate = dateFns.startOfWeek(this.state.currentMonth, {weekStartsOn: 1});\r\n        for (let i = 0; i < 7; i++) {\r\n        days.push(\r\n            <div className=\"col col-center day-name\" key={i}>\r\n            {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\r\n            </div>\r\n        );\r\n        }\r\n        return <div className=\"days row\">{days}</div>;\r\n    }\r\n    /**\r\n     * Renders each cell of the month\r\n     */\r\n    renderCells(){\r\n        const { currentMonth, selectedDate } = this.state;\r\n        const monthStart = dateFns.startOfMonth(currentMonth);\r\n        const monthEnd = dateFns.endOfMonth(monthStart);\r\n        const startDate = dateFns.startOfWeek(monthStart);\r\n        const endDate = dateFns.endOfWeek(monthEnd);\r\n        const dateFormat = \"d\";\r\n        const rows = [];\r\n        let days = [];\r\n        let day = startDate;\r\n        let formattedDate = \"\";\r\n        while (day <= endDate) {\r\n            for (let i = 0; i < 7; i++) {\r\n                formattedDate = dateFns.format(day, dateFormat);\r\n                let reminders = this.getDayReminders(day);\r\n                const cloneDay = day;\r\n                days.push(\r\n                <div\r\n                    className={`col cell day${\r\n                    !dateFns.isSameMonth(day, monthStart)\r\n                        ? \"-disabled\"\r\n                        : dateFns.isSameDay(day, selectedDate) ? \"-selected\" : \"\"\r\n                    }`}\r\n                    key={day}\r\n                    // onClick={() => this.onDateClick(dateFns.parse(cloneDay))}\r\n                >\r\n                    <span className=\"number\">{formattedDate}</span>\r\n                    <div>{reminders}</div>\r\n                </div>\r\n                );\r\n                day = dateFns.addDays(day, 1);\r\n            }\r\n        rows.push(\r\n            <div className=\"row\" key={day}>\r\n            {days}\r\n            </div>\r\n        );\r\n        days = [];\r\n        }\r\n        return <div className=\"month-body\">{rows}</div>;\r\n    }\r\n    /**\r\n     * Get and render the reminders for a given day\r\n     * @param {*} day \r\n     */\r\n    getDayReminders(day){\r\n        let reminders = [];\r\n        for(let r of this.props.reminders) {\r\n        let reminderDate = new Date(r.when).getDate() + \"/\" + new Date(r.when).getMonth();\r\n        if(reminderDate === (day.getDate() + \"/\" + day.getMonth())){\r\n            reminders.push(\r\n                <div key ={r.id} className=\"reminder\" onClick={() => this.props.openReminder(r)}>\r\n                    <div className=\"reminder-color\" style={\r\n                        {\r\n                            backgroundColor:r.color,\r\n                        }\r\n                    } ></div>\r\n                    <div className=\"reminder-description\">{r.description}</div><br/>\r\n                </div>\r\n            );\r\n        }\r\n        }\r\n        return reminders;\r\n    }\r\n    render(){\r\n        return(\r\n        <div className=\"month\">\r\n            {this.renderHeader()}\r\n            {this.renderDays()}\r\n            {this.renderCells()}\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\n    export default Calendar;","export default __webpack_public_path__ + \"static/media/add-black-18dp.a1119414.svg\";","import './App.css';\nimport { Component } from 'react';\n\nimport Popup from './components/popup/popup';\nimport Calendar from './components/calendar/calendar'\n\nimport AddIcon from './assets/add-black-18dp.svg';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      showPopup: false,\n      showReminder:false,\n      reminders: [],\n      reminder: null\n    }\n  }\n  /**\n   * React lifecycle function. Triggered when the component is rendered\n   */\n  componentDidMount(){\n    this.getData()\n  }\n  /**\n   * Open the popup\n   */\n  togglePopup() {\n    this.setState({\n      showPopup: !this.state.showPopup\n    });\n  }\n  /**\n   * Send new reminder to the DB\n   * @param formResult data from the \"new reminder\" popup\n   */\n  sendData(formResult){\n    if(formResult.description){\n      const newReminderKey = this.props.firebase.database().ref().child('reminders').push().key;\n      this.writeReminderData(newReminderKey,formResult.color,formResult.description, formResult.when, formResult.where)\n    }\n    this.setState({\n      showPopup: !this.state.showPopup\n    });\n  }\n  /**\n   * Fetch data from the database\n   */\n  getData(){\n    let DBreminders = [];\n    const remindersRef = this.props.firebase.database().ref('reminders');\n    remindersRef.once('value').then(snapshot => {\n      snapshot.forEach((childSnapshot) => {\n        // debugger\n        DBreminders.push({\n          id: childSnapshot.key,\n          color: childSnapshot.val().color,\n          when: childSnapshot.val().when,\n          where: childSnapshot.val().where,\n          description: childSnapshot.val().description\n        })\n      })\n      this.setState({\n        reminders: DBreminders\n      })\n    });\n  }\n  /**\n   * Write data of a new reminder to the DB\n   * @param {*} id unique id of the reminder\n   * @param {*} color color selected for the reminder\n   * @param {*} description description of the reminder\n   * @param {*} when when will it occur\n   * @param {*} where where will it occur\n   */\n  writeReminderData(id, color, description, when, where) {\n    this.props.firebase.database().ref('reminders/' + id).set({\n      color: color,\n      description: description,\n      when: when,\n      where: where\n    }).then(() => {\n      this.getData();\n    });\n  }\n\n  openReminder(r){\n    this.setState({\n      showReminder: !this.state.showReminder,\n      reminder: r\n    })\n    console.log(\"Reminder clicked\")\n  }\n  closeReminder(){\n    this.setState({\n      showReminder:!this.state.showReminder,\n    })\n  }\n  deleteReminder(reminder){\n    console.log(\"About to remove reminder: \" + reminder.id)\n    this.props.firebase.database().ref('reminders/' + reminder.id).remove().then(() => {\n      console.log(\"Data removed: \" + reminder.description)\n      this.setState({\n        showReminder:!this.state.showReminder,\n        reminder: null\n      })\n      this.getData();\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        {/* <header className=\"App-header\">\n          Calendar\n        </header> */}\n        <div className=\"calendar-body\">\n          <Calendar reminders={this.state.reminders} openReminder={(r) => this.openReminder(r)}/>\n        </div>\n        <button className=\"add-reminder\" onClick={this.togglePopup.bind(this)}>\n          <img src={AddIcon} alt=\"New reminder\"/>\n        </button>\n        {this.state.showPopup ? \n          <Popup\n            text='New reminder'\n            closePopup={this.sendData.bind(this)}\n          />\n          : null\n        }\n        {\n          this.state.showReminder ? \n          <Popup text='Reminder'\n          reminder={this.state.reminder}\n          closeReminder={this.closeReminder.bind(this)}\n          deleteReminder={() => this.deleteReminder(this.state.reminder)}/> : null\n        }\n      </div>\n    );\n  }\n}\n\n// Components NOT in use /////////////////////\n\n// class Day extends Component {\n//   render(){\n//     const day = this.props.day;\n//     const reminders = day.reminders.map(reminder => {\n//       return(\n//         <div className=\"reminder\">\n//           <Event event={reminder}/>\n//         </div>\n//       )\n//     })\n//     return(\n//       <div>\n//         <span>{day.day}</span>\n//         <div>{reminders}</div>\n//       </div>\n//     )\n//   }\n// }\n\n// class Event extends Component {\n//   render(){\n//     const event = this.props.event;\n//     return(\n//       <span>{event.description}</span>\n//     )\n//   }\n// }\n\n///////////////////////////////////////////////\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default {\r\n    apiKey: \"AIzaSyASvMuQUH8yx0TtH_1qI5iHwJawdYE5O9k\",\r\n    authDomain: \"react-calendar-c0b67.firebaseapp.com\",\r\n    projectId: \"react-calendar-c0b67\",\r\n    databaseURL: \"https://react-calendar-c0b67-default-rtdb.firebaseio.com\",\r\n    storageBucket: \"react-calendar-c0b67.appspot.com\",\r\n    messagingSenderId: \"210587085048\",\r\n    appId: \"1:210587085048:web:e74f891568c71a7c62b30d\"\r\n  };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport firebaseConfig from './firebase-config';\nimport {FirebaseAppProvider} from 'reactfire';\nimport firebase from 'firebase';\n\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(\n  <React.StrictMode>\n    <FirebaseAppProvider firebaseConfig={firebaseConfig}>\n      <App firebase={firebase}/>\n    </FirebaseAppProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}