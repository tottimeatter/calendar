[{"C:\\Users\\carne\\gitrepos\\react\\calendar\\src\\index.js":"1","C:\\Users\\carne\\gitrepos\\react\\calendar\\src\\reportWebVitals.js":"2","C:\\Users\\carne\\gitrepos\\react\\calendar\\src\\App.js":"3","C:\\Users\\carne\\gitrepos\\react\\calendar\\src\\mock-data.js":"4","C:\\Users\\carne\\gitrepos\\react\\calendar\\src\\firebase-config.js":"5","C:\\Users\\carne\\gitrepos\\react\\calendar\\src\\components\\popup\\popup.js":"6","C:\\Users\\carne\\gitrepos\\react\\calendar\\src\\components\\calendar\\calendar.js":"7"},{"size":777,"mtime":1611690319322,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":3949,"mtime":1612864581784,"results":"11","hashOfConfig":"9"},{"size":14209,"mtime":1611690319322,"results":"12","hashOfConfig":"9"},{"size":405,"mtime":1611687911568,"results":"13","hashOfConfig":"9"},{"size":2651,"mtime":1612806450927,"results":"14","hashOfConfig":"9"},{"size":3985,"mtime":1612805924274,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"b8em07",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"C:\\Users\\carne\\gitrepos\\react\\calendar\\src\\index.js",[],["34","35"],"C:\\Users\\carne\\gitrepos\\react\\calendar\\src\\reportWebVitals.js",[],"C:\\Users\\carne\\gitrepos\\react\\calendar\\src\\App.js",[],"C:\\Users\\carne\\gitrepos\\react\\calendar\\src\\mock-data.js",[],["36","37"],"C:\\Users\\carne\\gitrepos\\react\\calendar\\src\\firebase-config.js",["38"],"export default {\r\n    apiKey: \"AIzaSyASvMuQUH8yx0TtH_1qI5iHwJawdYE5O9k\",\r\n    authDomain: \"react-calendar-c0b67.firebaseapp.com\",\r\n    projectId: \"react-calendar-c0b67\",\r\n    databaseURL: \"https://react-calendar-c0b67-default-rtdb.firebaseio.com\",\r\n    storageBucket: \"react-calendar-c0b67.appspot.com\",\r\n    messagingSenderId: \"210587085048\",\r\n    appId: \"1:210587085048:web:e74f891568c71a7c62b30d\"\r\n  };","C:\\Users\\carne\\gitrepos\\react\\calendar\\src\\components\\popup\\popup.js",[],"C:\\Users\\carne\\gitrepos\\react\\calendar\\src\\components\\calendar\\calendar.js",["39"],"import { Component } from 'react';\r\nimport * as dateFns from 'date-fns';\r\nimport './calendar.css'\r\n\r\nclass Calendar extends Component {\r\n    render(){\r\n        return(\r\n          <div>\r\n            <Month reminders={this.props.reminders} openReminder={(r) => this.props.openReminder(r)}/>\r\n          </div>\r\n        )\r\n    }\r\n  }\r\n  \r\nclass Month extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n        currentMonth: new Date(),\r\n        selectedDate: new Date()\r\n        };\r\n    }\r\n    /**\r\n     * Renders the header of the page\r\n     */\r\n    renderHeader(){\r\n        return <h1 className=\"monthName\">{dateFns.format(this.state.currentMonth, 'MMMM yyyy')}</h1>\r\n    }\r\n    /**\r\n     * Renders days (name) of the current week\r\n     */\r\n    renderDays(){\r\n        const dateFormat = \"iiii\";\r\n        const days = [];\r\n        let startDate = dateFns.startOfWeek(this.state.currentMonth, {weekStartsOn: 1});\r\n        for (let i = 0; i < 7; i++) {\r\n        days.push(\r\n            <div className=\"col col-center day-name\" key={i}>\r\n            {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\r\n            </div>\r\n        );\r\n        }\r\n        return <div className=\"days row\">{days}</div>;\r\n    }\r\n    /**\r\n     * Renders each cell of the month\r\n     */\r\n    renderCells(){\r\n        const { currentMonth, selectedDate } = this.state;\r\n        const monthStart = dateFns.startOfMonth(currentMonth);\r\n        const monthEnd = dateFns.endOfMonth(monthStart);\r\n        const startDate = dateFns.startOfWeek(monthStart);\r\n        const endDate = dateFns.endOfWeek(monthEnd);\r\n        const dateFormat = \"d\";\r\n        const rows = [];\r\n        let days = [];\r\n        let day = startDate;\r\n        let formattedDate = \"\";\r\n        while (day <= endDate) {\r\n            for (let i = 0; i < 7; i++) {\r\n                formattedDate = dateFns.format(day, dateFormat);\r\n                let reminders = this.getDayReminders(day);\r\n                const cloneDay = day;\r\n                days.push(\r\n                <div\r\n                    className={`col cell day${\r\n                    !dateFns.isSameMonth(day, monthStart)\r\n                        ? \"-disabled\"\r\n                        : dateFns.isSameDay(day, selectedDate) ? \"-selected\" : \"\"\r\n                    }`}\r\n                    key={day}\r\n                    // onClick={() => this.onDateClick(dateFns.parse(cloneDay))}\r\n                >\r\n                    <span className=\"number\">{formattedDate}</span>\r\n                    <div>{reminders}</div>\r\n                </div>\r\n                );\r\n                day = dateFns.addDays(day, 1);\r\n            }\r\n        rows.push(\r\n            <div className=\"row\" key={day}>\r\n            {days}\r\n            </div>\r\n        );\r\n        days = [];\r\n        }\r\n        return <div className=\"month-body\">{rows}</div>;\r\n    }\r\n    /**\r\n     * Get and render the reminders for a given day\r\n     * @param {*} day \r\n     */\r\n    getDayReminders(day){\r\n        let reminders = [];\r\n        for(let r of this.props.reminders) {\r\n        let reminderDate = new Date(r.when).getDate() + \"/\" + new Date(r.when).getMonth();\r\n        if(reminderDate === (day.getDate() + \"/\" + day.getMonth())){\r\n            reminders.push(\r\n                <div key ={r.id} className=\"reminder\" onClick={() => this.props.openReminder(r)}>\r\n                    <div className=\"reminder-color\" style={\r\n                        {\r\n                            backgroundColor:r.color,\r\n                        }\r\n                    } ></div>\r\n                    <div className=\"reminder-description\">{r.description}</div><br/>\r\n                </div>\r\n            );\r\n        }\r\n        }\r\n        return reminders;\r\n    }\r\n    render(){\r\n        return(\r\n        <div className=\"month\">\r\n            {this.renderHeader()}\r\n            {this.renderDays()}\r\n            {this.renderCells()}\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\n    export default Calendar;",{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"40","replacedBy":"44"},{"ruleId":"42","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":1,"column":1,"nodeType":"48","endLine":9,"endColumn":5},{"ruleId":"49","severity":1,"message":"50","line":63,"column":23,"nodeType":"51","messageId":"52","endLine":63,"endColumn":31},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],["53"],["54"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'cloneDay' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]